#include "../include/STD_Types.h"
#include "../include/GPT_Interface.h"
#include "../include/MGPIO_Interface.h"
#include "../include/MRCC_Interface.h"
#include "../include/MNVIC_Interface.h"
#include "../include/GPT_Private.h"

#include "../include/HIR_Interface.h"

#include "../include/MEXTI_Interface.h"

#include "../include/BIT_MATH.h"

int main(){
	MRCC_Init();

	MRCC_Enable_Peripheral(RCC_APB1,RCC_APB1_TIM2);
	MRCC_Enable_Peripheral(RCC_APB1,RCC_APB1_TIM5);
	MRCC_Enable_Peripheral(RCC_AHB1,RCC_AHB1_GPIOA);

	MGPIO_SetMode(PORTA,PIN0,ALTERNATE_FUNCTION_MODE);
	MGPIO_SetAlternativeFuncPin(PORTA,PIN0,AF2_TIM3_TIM4_TIM5);

	MGPIO_SetMode(PORTA,PIN1,ALTERNATE_FUNCTION_MODE);
	MGPIO_SetAlternativeFuncPin(PORTA,PIN1,AF2_TIM3_TIM4_TIM5);

	MGPIO_SetMode(PORTA,PIN2,ALTERNATE_FUNCTION_MODE);
	MGPIO_SetAlternativeFuncPin(PORTA,PIN2,AF2_TIM3_TIM4_TIM5);

	MGPIO_SetMode(PORTA,PIN3,ALTERNATE_FUNCTION_MODE);
	MGPIO_SetAlternativeFuncPin(PORTA,PIN3,AF2_TIM3_TIM4_TIM5);


	MGPIO_SetMode(PORTA,PIN4,GENRAL_PURPOSE_OUTPUT_MODE);
	MGPIO_SetOutputPinMode(PORTA,PIN4,OUTPUT_PUSH_PULL,GPIO_PIN_LEVEL_LOW );
	MGPIO_SetPinValue(PORTA,PIN4,PIN_LEVEL_LOW);




	TIMER_Init(&Timer2_configuration);
	TIMER_ChannelInit(TIMER2_SELECTION,
			TIMER_CHANNEL_1,
			TIMER_FROZEN,
			ACTIVE_HIGH,
			TIMER_CHANNEL_DISABLE);


	TIMER_Init(&Timer5_configuration);
	TIMER_ChannelInit(TIMER5_SELECTION,
			TIMER_CHANNEL_1,
			TIMER_PWM_MODE_1,
			ACTIVE_HIGH,
			TIMER_CHANNEL_ENABLE);
	TIMER_ChannelInit(TIMER5_SELECTION,
			TIMER_CHANNEL_2,
			TIMER_PWM_MODE_1,
			ACTIVE_HIGH,
			TIMER_CHANNEL_ENABLE);
	TIMER_ChannelInit(TIMER5_SELECTION,
			TIMER_CHANNEL_3,
			TIMER_PWM_MODE_1,
			ACTIVE_HIGH,
			TIMER_CHANNEL_ENABLE);
	TIMER_ChannelInit(TIMER5_SELECTION,
			TIMER_CHANNEL_4,
			TIMER_PWM_MODE_1,
			ACTIVE_HIGH,
			TIMER_CHANNEL_ENABLE);


	TIMER_ClearTimerCount(TIMER5_SELECTION);
	TIMER_ClearTimerCount(TIMER2_SELECTION);

	/* Timer 5 pwm */
	TIMER_SetPrescaler(TIMER5_SELECTION,15);
	TIMER_SetARR(TIMER5_SELECTION,100000);

	TIMER_SetCompareValue(TIMER5_SELECTION,TIMER_CHANNEL_1,50000);
	TIMER_SetCompareValue(TIMER5_SELECTION,TIMER_CHANNEL_2,50000);
	TIMER_SetCompareValue(TIMER5_SELECTION,TIMER_CHANNEL_3,50000);
	TIMER_SetCompareValue(TIMER5_SELECTION,TIMER_CHANNEL_4,50000);


	TIMER_Start_Continuous(TIMER5_SELECTION,TIMER_ALL_CHANNELS);

//	MNVIC_VoidEnbleInterrupt(EXTINT_TIM2_POSITION);

//	TIMER_EnableInterrupt(TIMER2_SELECTION,TIMER_CHANNEL_1);

//	TIMER_Start_Continuous(TIMER2_SELECTION);






	while(1){

		MGPIO_SetPinValue(PORTA,PIN4,PIN_LEVEL_HIGH);
		TIMER_DelayUS(TIMER2_SELECTION,3000000);
		MGPIO_SetPinValue(PORTA,PIN4,PIN_LEVEL_LOW);
		TIMER_Start_Continuous(TIMER5_SELECTION,TIMER_ALL_CHANNELS);
		TIMER_DelayUS(TIMER2_SELECTION,3000000);
		TIMER_Stop(TIMER5_SELECTION,TIMER_ALL_CHANNELS);

//		TIMER_SetCompareValue(TIMER2_SELECTION, TIMER_CHANNEL_1, 1000000);
//		TIMER_SetARR(TIMER2_SELECTION, 1000000);
//		TIMER_Start_OneShot(TIMER2_SELECTION);
//		while(GET_BIT(TIMER2->SR,CC1IF)==0);
//		CLEAR_BIT(TIMER2->SR,CC1IF);
//		MGPIO_SetPinValue(PORTA,PIN1,PIN_LEVEL_HIGH);
//		TIMER_Start_OneShot(TIMER2_SELECTION);
//		while(GET_BIT(TIMER2->SR,CC1IF)==0);
//		CLEAR_BIT(TIMER2->SR,CC1IF);
//		MGPIO_SetPinValue(PORTA,PIN1,PIN_LEVEL_LOW);
//
//
//
//		TIMER_SetCompareValue(TIMER2_SELECTION, TIMER_CHANNEL_1, 250000);
//		TIMER_SetARR(TIMER2_SELECTION, 250000);
//		TIMER_Start_OneShot(TIMER2_SELECTION);
//		while(GET_BIT(TIMER2->SR,CC1IF)==0);
//		CLEAR_BIT(TIMER2->SR,CC1IF);
//		MGPIO_SetPinValue(PORTA,PIN1,PIN_LEVEL_HIGH);
//		TIMER_Start_OneShot(TIMER2_SELECTION);
//		while(GET_BIT(TIMER2->SR,CC1IF)==0);
//		CLEAR_BIT(TIMER2->SR,CC1IF);
//		MGPIO_SetPinValue(PORTA,PIN1,PIN_LEVEL_LOW);
	}


}

