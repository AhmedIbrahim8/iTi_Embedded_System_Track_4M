/*******************************************************************************************/
/*  Module       :   NVIC                                                                  */
/*  File Name    :   MNVIC_Program.c                                                       */
/*  Description  :   Source File of the MNIVC Driver                                       */
/*  Author       :   Ahmed Ibrahim                                                         */
/*  Date         :   11/09/2023                                                            */
/*******************************************************************************************/


/*******************************************************************************************/
/*********************************** Included  Files ***************************************/
/*******************************************************************************************/
/* Standard Types File */
#include "../include\STD_Types.h"
/* Bit Math File */
#include "../include\BIT_MATH.h"

/* RCC Specified Header Files */
#include "../include\MNVIC_Interface.h"
#include "../include\MNVIC_Config.h"
#include "../include\MNVIC_Private.h"

/********************************************************************************************/
/************************************** Global Variables ************************************/
/********************************************************************************************/
/* GroupMode is private variable used in the module only so, it must be static */
static MNVIC_Group_t GroupMode=0;

/********************************************************************************************/
/************************************** APIs Definition *************************************/
/********************************************************************************************/
/* This Function responsible for :                                                          */
/*           - Enable the NVIC Bit for the specified Peripheral in the Copy_u8IntPos        */
void MNVIC_VoidEnbleInterrupt(u8 Copy_u8IntPos)
{
	SET_BIT(NVIC->ISER[Copy_u8IntPos/NUMBER_32],Copy_u8IntPos%NUMBER_32);
}

void MNVIC_VoidDisableInterrupt(u8 Copy_u8IntPos)
{
	SET_BIT(NVIC->ICER[Copy_u8IntPos/NUMBER_32],Copy_u8IntPos%NUMBER_32);
}

void MNVIC_VoidEnableInterruptPending(u8 Copy_u8IntPos)
{
	SET_BIT(NVIC->ISPR[Copy_u8IntPos/NUMBER_32],Copy_u8IntPos%NUMBER_32);
}

void MNVIC_VoidDisableInterruptPending(u8 Copy_u8IntPos)
{
	SET_BIT(NVIC->ICPR[Copy_u8IntPos/NUMBER_32],Copy_u8IntPos%NUMBER_32);
}

void MNVIC_VoidIsInterruptActive(u8 Copy_u8IntPos,u8 *Copy_Read)
{
	*Copy_Read = GET_BIT(NVIC->IABR[Copy_u8IntPos/NUMBER_32],Copy_u8IntPos%NUMBER_32);
}

void MNVIC_VoidSetInterruptGroupMode(MNVIC_Group_t GroupSubMode)
{
	GroupMode = GroupSubMode;
	u32 Local_u32temp = (SCB_AIRCR &~(SCB_AIRCR_GROUP_MASK)) | (GroupSubMode<<BIT_NUMBER_8) | SCB_AIRCR_VECTKEY_NUMBER;
	SCB_AIRCR = Local_u32temp;
}


void MNVIC_VoidSetInterruptPriority(u8 Copy_u8IntPos,u8 Copy_u8GroupNum,u8 Copy_u8SubGroupNum)
{
	NVIC->IPR[Copy_u8IntPos] = NVIC->IPR[Copy_u8IntPos] & 0x0F;
	switch(GroupMode)
	{
	case GROUP_16_SUB_NONE:
		NVIC->IPR[Copy_u8IntPos] = Copy_u8GroupNum << 4;
		break;
	case GROUP_8_SUB_2:
		NVIC->IPR[Copy_u8IntPos] = (Copy_u8GroupNum << 5) | (Copy_u8SubGroupNum <<4);
		break;
	case GROUP_4_SUB_4:
		NVIC->IPR[Copy_u8IntPos] = (Copy_u8GroupNum << 6) | (Copy_u8SubGroupNum <<4);
		break;
	case GROUP_2_SUB_8:
		NVIC->IPR[Copy_u8IntPos] = (Copy_u8GroupNum << 7) | (Copy_u8SubGroupNum <<4);
		break;
	case GROUP_NONE_SUB_16:
		NVIC->IPR[Copy_u8IntPos] = Copy_u8SubGroupNum << 4;
		break;
	default:
		/* Do No thing */
	}

}

