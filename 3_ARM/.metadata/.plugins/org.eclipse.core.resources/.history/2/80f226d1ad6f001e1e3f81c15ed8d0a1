/* Standard Types File */
#include "../include/STD_Types.h"
/* Bit Math File */
#include "../include/BIT_MATH.h"

/* RCC Specified Header Files */
#include "../include/GPT_Interface.h"
#include "../include/GPT_Config.h"
#include "../include/GPT_Private.h"


#include "../include/MGPIO_Interface.h"


static void (*Timer_Call_Back[4])(void)={NULL_PTR};

void TIM2_IRQHandler(void){
	if(Timer_Call_Back[0]!=NULL_PTR){
		Timer_Call_Back[0]();
	}
	else{
		/* Do No Thing */
	}

	CLEAR_BIT(TIMER2->SR,CC1IF);
	CLEAR_BIT(TIMER2->SR,CC2IF);
	CLEAR_BIT(TIMER2->SR,CC3IF);
	CLEAR_BIT(TIMER2->SR,CC4IF);
}


void TIM3_IRQHandler(void){
	if(Timer_Call_Back[1]!=NULL_PTR){
		Timer_Call_Back[1]();
	}
	else{
		/* Do No Thing */
	}

	CLEAR_BIT(TIMER3->SR,CC1IF);
	CLEAR_BIT(TIMER3->SR,CC2IF);
	CLEAR_BIT(TIMER3->SR,CC3IF);
	CLEAR_BIT(TIMER3->SR,CC4IF);
}



void TIM4_IRQHandler(void){
	if(Timer_Call_Back[2]!=NULL_PTR){
		Timer_Call_Back[2]();
	}
	else{
		/* Do No Thing */
	}

	CLEAR_BIT(TIMER4->SR,CC1IF);
	CLEAR_BIT(TIMER4->SR,CC2IF);
	CLEAR_BIT(TIMER4->SR,CC3IF);
	CLEAR_BIT(TIMER4->SR,CC4IF);
}




void TIM5_IRQHandler(void){
	if(Timer_Call_Back[3]!=NULL_PTR){
		Timer_Call_Back[3]();
	}
	else{
		/* Do No Thing */
	}

	CLEAR_BIT(TIMER5->SR,CC1IF);
	CLEAR_BIT(TIMER5->SR,CC2IF);
	CLEAR_BIT(TIMER5->SR,CC3IF);
	CLEAR_BIT(TIMER5->SR,CC4IF);
}



void TIMER_VoidSetCallBack(TIMER_IDType Timer_Number,void (*ptr)(void)){
	switch(Timer_Number)
	{
	case TIMER2_SELECTION:
		Timer_Call_Back[0]=ptr;
		break;
	case TIMER3_SELECTION:
		Timer_Call_Back[1]=ptr;
		break;
	case TIMER4_SELECTION:
		Timer_Call_Back[2]=ptr;
		break;
	case TIMER5_SELECTION:
		Timer_Call_Back[3]=ptr;
		break;
	}
}


void TIMER_DelayUS(TIMER_IDType Timer_Number,u32 Delay_Value){
	switch(Timer_Number)
	{
	case TIMER2_SELECTION:
		TIMER_SetPrescaler(TIMER2_SELECTION, 15);
		TIMER_SetCompareValue(TIMER2_SELECTION, TIMER_CHANNEL_1, Delay_Value);
		TIMER_SetARR(TIMER2_SELECTION, Delay_Value);
		TIMER_ClearTimerCount(TIMER2_SELECTION);
		TIMER_Start_OneShot( TIMER2_SELECTION);
		while(GET_BIT(TIMER2->SR,CC1IF)==0);
		CLEAR_BIT(TIMER2->SR,CC1IF);
		break;
	case TIMER3_SELECTION:
		TIMER_SetPrescaler(TIMER3_SELECTION, 15);
		TIMER_SetCompareValue(TIMER3_SELECTION, TIMER_CHANNEL_1, Delay_Value);
		TIMER_SetARR(TIMER3_SELECTION, Delay_Value);
		TIMER_ClearTimerCount(TIMER3_SELECTION);
		TIMER_Start_OneShot( TIMER3_SELECTION);
		while(GET_BIT(TIMER3->SR,CC1IF)==0);
		CLEAR_BIT(TIMER3->SR,CC1IF);
		break;
	case TIMER4_SELECTION:
		TIMER_SetPrescaler(TIMER5_SELECTION, 15);
		TIMER_SetCompareValue(TIMER4_SELECTION, TIMER_CHANNEL_1, Delay_Value);
		TIMER_SetARR(TIMER4_SELECTION, Delay_Value);
		TIMER_ClearTimerCount(TIMER4_SELECTION);
		TIMER_Start_OneShot( TIMER4_SELECTION);
		while(GET_BIT(TIMER4->SR,CC1IF)==0);
		CLEAR_BIT(TIMER4->SR,CC1IF);
		break;
	case TIMER5_SELECTION:
		TIMER_SetPrescaler(TIMER5_SELECTION, 15);
		TIMER_SetCompareValue(TIMER5_SELECTION, TIMER_CHANNEL_1, Delay_Value);
		TIMER_SetARR(TIMER5_SELECTION, Delay_Value);
		TIMER_ClearTimerCount(TIMER5_SELECTION);
		TIMER_Start_OneShot( TIMER5_SELECTION);
		while(GET_BIT(TIMER5->SR,CC1IF)==0);
		CLEAR_BIT(TIMER5->SR,CC1IF);
		break;
	}

}



void TIMER_ChannelInit(TIMER_IDType Timer_Number,
		               TIMER_ChannelType ChannelID,
					   TIMER_OutputCompareModeType Mode,
					   TIMER_ChannelOutputActiveType ActiveType,
					   TIMER_ChannelEnableType ChannelType){
	switch(Timer_Number)
	{
	case TIMER2_SELECTION:
		switch(ChannelID){
		case TIMER_CHANNEL_1:
			/* Adjust the output compare Channel Mode */
			TIMER2->CCMR1 = (TIMER2->CCMR1 & CHANNEL1_MASK)|(Mode <<OC1M0);
			/* Clear OC1PE Bit */
			CLEAR_BIT(TIMER2->CCMR1,OC1PE);
			/* Adjust the polarity
			 * Active High   0
			 * Active Low    1
			 *  */
			if(ActiveType == ACTIVE_HIGH){
				CLEAR_BIT(TIMER2->CCER , CC1P);
			}
			else{
				SET_BIT(TIMER2->CCER , CC1P);
			}


			if(ChannelType==TIMER_CHANNEL_ENABLE){
				/* Set the channel to be active to output the desired signal */
				SET_BIT(TIMER2->CCER , CC1E);
			}
			else if(ChannelType==TIMER_CHANNEL_DISABLE){
				/* Clear the channel to be deactivated to output the desired signal */
				CLEAR_BIT(TIMER2->CCER , CC1E);
			}
			else{
				/* Do Nothing */
			}
			break;
		case TIMER_CHANNEL_2:
			/* Adjust the output compare Channel Mode */
			TIMER2->CCMR1 = (TIMER2->CCMR1 & CHANNEL2_MASK)|(Mode <<OC2M0);
			/* Clear OC1PE Bit */
			CLEAR_BIT(TIMER2->CCMR1,OC2PE);
			/* Adjust the polarity
			 * Active High   0
			 * Active Low    1
			 *  */
			if(ActiveType == ACTIVE_HIGH){
				CLEAR_BIT(TIMER2->CCER , CC2P);
			}
			else{
				SET_BIT(TIMER2->CCER , CC2P);
			}


			if(ChannelType==TIMER_CHANNEL_ENABLE){
				/* Set the channel to be active to output the desired signal */
				SET_BIT(TIMER2->CCER , CC2E);
			}
			else if(ChannelType==TIMER_CHANNEL_DISABLE){
				/* Clear the channel to be deactivated to output the desired signal */
				CLEAR_BIT(TIMER2->CCER , CC2E);
			}
			else{
				/* Do Nothing */
			}
			break;
		case TIMER_CHANNEL_3:
			/* Adjust the output compare Channel Mode */
			TIMER2->CCMR2 = (TIMER2->CCMR2 & CHANNEL3_MASK)|(Mode <<OC3M0);
			/* Clear OC1PE Bit */
			CLEAR_BIT(TIMER2->CCMR2,OC3PE);
			/* Adjust the polarity
			 * Active High   0
			 * Active Low    1
			 *  */
			if(ActiveType == ACTIVE_HIGH){
				CLEAR_BIT(TIMER2->CCER , CC3P);
			}
			else{
				SET_BIT(TIMER2->CCER , CC3P);
			}


			if(ChannelType==TIMER_CHANNEL_ENABLE){
				/* Set the channel to be active to output the desired signal */
				SET_BIT(TIMER2->CCER , CC3E);
			}
			else if(ChannelType==TIMER_CHANNEL_DISABLE){
				/* Clear the channel to be deactivated to output the desired signal */
				CLEAR_BIT(TIMER2->CCER , CC3E);
			}
			else{
				/* Do Nothing */
			}
			break;
		case TIMER_CHANNEL_4:
			/* Adjust the output compare Channel Mode */
			TIMER2->CCMR2 = (TIMER2->CCMR2 & CHANNEL4_MASK)|(Mode <<OC4M0);
			/* Clear OC1PE Bit */
			CLEAR_BIT(TIMER2->CCMR2,OC4PE);
			/* Adjust the polarity
			 * Active High   0
			 * Active Low    1
			 *  */
			if(ActiveType == ACTIVE_HIGH){
				CLEAR_BIT(TIMER2->CCER , CC4P);
			}
			else{
				SET_BIT(TIMER2->CCER , CC4P);
			}


			if(ChannelType==TIMER_CHANNEL_ENABLE){
				/* Set the channel to be active to output the desired signal */
				SET_BIT(TIMER2->CCER , CC4E);
			}
			else if(ChannelType==TIMER_CHANNEL_DISABLE){
				/* Clear the channel to be deactivated to output the desired signal */
				CLEAR_BIT(TIMER2->CCER , CC4E);
			}
			else{
				/* Do Nothing */
			}
			break;
		}
		break;
	case TIMER3_SELECTION:
		switch(ChannelID){
		case TIMER_CHANNEL_1:
			/* Adjust the output compare Channel Mode */
			TIMER3->CCMR1 = (TIMER3->CCMR1 & CHANNEL1_MASK)|(Mode <<OC1M0);
			/* Clear OC1PE Bit */
			CLEAR_BIT(TIMER3->CCMR1,OC1PE);
			/* Adjust the polarity
			 * Active High   0
			 * Active Low    1
			 *  */
			if(ActiveType == ACTIVE_HIGH){
				CLEAR_BIT(TIMER3->CCER , CC1P);
			}
			else{
				SET_BIT(TIMER3->CCER , CC1P);
			}


			if(ChannelType==TIMER_CHANNEL_ENABLE){
				/* Set the channel to be active to output the desired signal */
				SET_BIT(TIMER3->CCER , CC1E);
			}
			else if(ChannelType==TIMER_CHANNEL_DISABLE){
				/* Clear the channel to be deactivated to output the desired signal */
				CLEAR_BIT(TIMER3->CCER , CC1E);
			}
			else{
				/* Do Nothing */
			}
			break;
		case TIMER_CHANNEL_2:
			/* Adjust the output compare Channel Mode */
			TIMER3->CCMR1 = (TIMER3->CCMR1 & CHANNEL2_MASK)|(Mode <<OC2M0);
			/* Clear OC1PE Bit */
			CLEAR_BIT(TIMER3->CCMR1,OC2PE);
			/* Adjust the polarity
			 * Active High   0
			 * Active Low    1
			 *  */
			if(ActiveType == ACTIVE_HIGH){
				CLEAR_BIT(TIMER3->CCER , CC2P);
			}
			else{
				SET_BIT(TIMER3->CCER , CC2P);
			}


			if(ChannelType==TIMER_CHANNEL_ENABLE){
				/* Set the channel to be active to output the desired signal */
				SET_BIT(TIMER3->CCER , CC2E);
			}
			else if(ChannelType==TIMER_CHANNEL_DISABLE){
				/* Clear the channel to be deactivated to output the desired signal */
				CLEAR_BIT(TIMER3->CCER , CC2E);
			}
			else{
				/* Do Nothing */
			}
			break;
		case TIMER_CHANNEL_3:
			/* Adjust the output compare Channel Mode */
			TIMER3->CCMR2 = (TIMER3->CCMR2 & CHANNEL3_MASK)|(Mode <<OC3M0);
			/* Clear OC1PE Bit */
			CLEAR_BIT(TIMER3->CCMR2,OC3PE);
			/* Adjust the polarity
			 * Active High   0
			 * Active Low    1
			 *  */
			if(ActiveType == ACTIVE_HIGH){
				CLEAR_BIT(TIMER3->CCER , CC3P);
			}
			else{
				SET_BIT(TIMER3->CCER , CC3P);
			}


			if(ChannelType==TIMER_CHANNEL_ENABLE){
				/* Set the channel to be active to output the desired signal */
				SET_BIT(TIMER3->CCER , CC3E);
			}
			else if(ChannelType==TIMER_CHANNEL_DISABLE){
				/* Clear the channel to be deactivated to output the desired signal */
				CLEAR_BIT(TIMER3->CCER , CC3E);
			}
			else{
				/* Do Nothing */
			}
			break;
		case TIMER_CHANNEL_4:
			/* Adjust the output compare Channel Mode */
			TIMER3->CCMR2 = (TIMER3->CCMR2 & CHANNEL4_MASK)|(Mode <<OC4M0);
			/* Clear OC1PE Bit */
			CLEAR_BIT(TIMER3->CCMR2,OC4PE);
			/* Adjust the polarity
			 * Active High   0
			 * Active Low    1
			 *  */
			if(ActiveType == ACTIVE_HIGH){
				CLEAR_BIT(TIMER3->CCER , CC4P);
			}
			else{
				SET_BIT(TIMER3->CCER , CC4P);
			}


			if(ChannelType==TIMER_CHANNEL_ENABLE){
				/* Set the channel to be active to output the desired signal */
				SET_BIT(TIMER3->CCER , CC4E);
			}
			else if(ChannelType==TIMER_CHANNEL_DISABLE){
				/* Clear the channel to be deactivated to output the desired signal */
				CLEAR_BIT(TIMER3->CCER , CC4E);
			}
			else{
				/* Do Nothing */
			}
			break;
		}
		break;
	case TIMER4_SELECTION:
		switch(ChannelID){
		case TIMER_CHANNEL_1:
			/* Adjust the output compare Channel Mode */
			TIMER4->CCMR1 = (TIMER4->CCMR1 & CHANNEL1_MASK)|(Mode <<OC1M0);
			/* Clear OC1PE Bit */
			CLEAR_BIT(TIMER4->CCMR1,OC1PE);
			/* Adjust the polarity
			 * Active High   0
			 * Active Low    1
			 *  */
			if(ActiveType == ACTIVE_HIGH){
				CLEAR_BIT(TIMER4->CCER , CC1P);
			}
			else{
				SET_BIT(TIMER4->CCER , CC1P);
			}


			if(ChannelType==TIMER_CHANNEL_ENABLE){
				/* Set the channel to be active to output the desired signal */
				SET_BIT(TIMER4->CCER , CC1E);
			}
			else if(ChannelType==TIMER_CHANNEL_DISABLE){
				/* Clear the channel to be deactivated to output the desired signal */
				CLEAR_BIT(TIMER4->CCER , CC1E);
			}
			else{
				/* Do Nothing */
			}
			break;
		case TIMER_CHANNEL_2:
			/* Adjust the output compare Channel Mode */
			TIMER4->CCMR1 = (TIMER4->CCMR1 & CHANNEL2_MASK)|(Mode <<OC2M0);
			/* Clear OC1PE Bit */
			CLEAR_BIT(TIMER4->CCMR1,OC2PE);
			/* Adjust the polarity
			 * Active High   0
			 * Active Low    1
			 *  */
			if(ActiveType == ACTIVE_HIGH){
				CLEAR_BIT(TIMER4->CCER , CC2P);
			}
			else{
				SET_BIT(TIMER4->CCER , CC2P);
			}


			if(ChannelType==TIMER_CHANNEL_ENABLE){
				/* Set the channel to be active to output the desired signal */
				SET_BIT(TIMER4->CCER , CC2E);
			}
			else if(ChannelType==TIMER_CHANNEL_DISABLE){
				/* Clear the channel to be deactivated to output the desired signal */
				CLEAR_BIT(TIMER4->CCER , CC2E);
			}
			else{
				/* Do Nothing */
			}
			break;
		case TIMER_CHANNEL_3:
			/* Adjust the output compare Channel Mode */
			TIMER4->CCMR2 = (TIMER4->CCMR2 & CHANNEL3_MASK)|(Mode <<OC3M0);
			/* Clear OC1PE Bit */
			CLEAR_BIT(TIMER3->CCMR2,OC3PE);
			/* Adjust the polarity
			 * Active High   0
			 * Active Low    1
			 *  */
			if(ActiveType == ACTIVE_HIGH){
				CLEAR_BIT(TIMER4->CCER , CC3P);
			}
			else{
				SET_BIT(TIMER4->CCER , CC3P);
			}


			if(ChannelType==TIMER_CHANNEL_ENABLE){
				/* Set the channel to be active to output the desired signal */
				SET_BIT(TIMER4->CCER , CC3E);
			}
			else if(ChannelType==TIMER_CHANNEL_DISABLE){
				/* Clear the channel to be deactivated to output the desired signal */
				CLEAR_BIT(TIMER4->CCER , CC3E);
			}
			else{
				/* Do Nothing */
			}
			break;
		case TIMER_CHANNEL_4:
			/* Adjust the output compare Channel Mode */
			TIMER4->CCMR2 = (TIMER4->CCMR2 & CHANNEL4_MASK)|(Mode <<OC4M0);
			/* Clear OC1PE Bit */
			CLEAR_BIT(TIMER4->CCMR2,OC4PE);
			/* Adjust the polarity
			 * Active High   0
			 * Active Low    1
			 *  */
			if(ActiveType == ACTIVE_HIGH){
				CLEAR_BIT(TIMER4->CCER , CC4P);
			}
			else{
				SET_BIT(TIMER4->CCER , CC4P);
			}


			if(ChannelType==TIMER_CHANNEL_ENABLE){
				/* Set the channel to be active to output the desired signal */
				SET_BIT(TIMER4->CCER , CC4E);
			}
			else if(ChannelType==TIMER_CHANNEL_DISABLE){
				/* Clear the channel to be deactivated to output the desired signal */
				CLEAR_BIT(TIMER4->CCER , CC4E);
			}
			else{
				/* Do Nothing */
			}
			break;
		}
		break;
	case TIMER5_SELECTION:
		switch(ChannelID){
		case TIMER_CHANNEL_1:
			/* Adjust the output compare Channel Mode */
			TIMER5->CCMR1 = (TIMER5->CCMR1 & CHANNEL1_MASK)|(Mode <<OC1M0);
			/* Clear OC1PE Bit */
			CLEAR_BIT(TIMER5->CCMR1,OC1PE);
			/* Adjust the polarity
			 * Active High   0
			 * Active Low    1
			 *  */
			if(ActiveType == ACTIVE_HIGH){
				CLEAR_BIT(TIMER5->CCER , CC1P);
			}
			else{
				SET_BIT(TIMER5->CCER , CC1P);
			}


			if(ChannelType==TIMER_CHANNEL_ENABLE){
				/* Set the channel to be active to output the desired signal */
				SET_BIT(TIMER5->CCER , CC1E);
			}
			else if(ChannelType==TIMER_CHANNEL_DISABLE){
				/* Clear the channel to be deactivated to output the desired signal */
				CLEAR_BIT(TIMER5->CCER , CC1E);
			}
			else{
				/* Do Nothing */
			}
			break;
		case TIMER_CHANNEL_2:
			/* Adjust the output compare Channel Mode */
			TIMER5->CCMR1 = (TIMER5->CCMR1 & CHANNEL2_MASK)|(Mode <<OC2M0);
			/* Clear OC1PE Bit */
			CLEAR_BIT(TIMER5->CCMR1,OC2PE);
			/* Adjust the polarity
			 * Active High   0
			 * Active Low    1
			 *  */
			if(ActiveType == ACTIVE_HIGH){
				CLEAR_BIT(TIMER5->CCER , CC2P);
			}
			else{
				SET_BIT(TIMER5->CCER , CC2P);
			}


			if(ChannelType==TIMER_CHANNEL_ENABLE){
				/* Set the channel to be active to output the desired signal */
				SET_BIT(TIMER5->CCER , CC2E);
			}
			else if(ChannelType==TIMER_CHANNEL_DISABLE){
				/* Clear the channel to be deactivated to output the desired signal */
				CLEAR_BIT(TIMER5->CCER , CC2E);
			}
			else{
				/* Do Nothing */
			}
			break;
		case TIMER_CHANNEL_3:
			/* Adjust the output compare Channel Mode */
			TIMER5->CCMR2 = (TIMER5->CCMR2 & CHANNEL3_MASK)|(Mode <<OC3M0);
			/* Clear OC1PE Bit */
			CLEAR_BIT(TIMER5->CCMR2,OC3PE);
			/* Adjust the polarity
			 * Active High   0
			 * Active Low    1
			 *  */
			if(ActiveType == ACTIVE_HIGH){
				CLEAR_BIT(TIMER5->CCER , CC3P);
			}
			else{
				SET_BIT(TIMER5->CCER , CC3P);
			}


			if(ChannelType==TIMER_CHANNEL_ENABLE){
				/* Set the channel to be active to output the desired signal */
				SET_BIT(TIMER5->CCER , CC3E);
			}
			else if(ChannelType==TIMER_CHANNEL_DISABLE){
				/* Clear the channel to be deactivated to output the desired signal */
				CLEAR_BIT(TIMER5->CCER , CC3E);
			}
			else{
				/* Do Nothing */
			}
			break;
		case TIMER_CHANNEL_4:
			/* Adjust the output compare Channel Mode */
			TIMER5->CCMR2 = (TIMER5->CCMR2 & CHANNEL4_MASK)|(Mode <<OC4M0);
			/* Clear OC1PE Bit */
			CLEAR_BIT(TIMER5->CCMR2,OC4PE);
			/* Adjust the polarity
			 * Active High   0
			 * Active Low    1
			 *  */
			if(ActiveType == ACTIVE_HIGH){
				CLEAR_BIT(TIMER5->CCER , CC4P);
			}
			else{
				SET_BIT(TIMER5->CCER , CC4P);
			}


			if(ChannelType==TIMER_CHANNEL_ENABLE){
				/* Set the channel to be active to output the desired signal */
				SET_BIT(TIMER5->CCER , CC4E);
			}
			else if(ChannelType==TIMER_CHANNEL_DISABLE){
				/* Clear the channel to be deactivated to output the desired signal */
				CLEAR_BIT(TIMER5->CCER , CC4E);
			}
			else{
				/* Do Nothing */
			}
		break;
	}

}
}


void TIMER_Init(TIMER_configType *Configuration){
	/* Adjust the slave mode selection */
	/* Use the internal clock */


	if(Configuration->timer_id == TIMER2_SELECTION){
		TIMER2->SMCR = 0;
		TIMER2->CR1 = (Configuration->PreloadType    << ARPE)\
				|(Configuration->AlignedType         << CMS0)\
				|(Configuration->CountMode           << DIR );

		/* Adjust the interrupt and update event */
		if(Configuration->UEV_INT_Type == TIMER_UPDATE_EVENT_ENABLED_INTERRUPT_FLAG_DISABLED){
			/* Update event enabled & interrupt flag disabled */
			SET_BIT(TIMER2->CR1,URS);
			CLEAR_BIT(TIMER2->CR1,UDIS);
		}
		else if(Configuration->UEV_INT_Type == TIMER_UPDATE_EVENT_ENABLED_INTERRUPT_FLAG_ENABLED){
			/* Update event enabled & interrupt flag Enabled */
			CLEAR_BIT(TIMER2->CR1,URS);
			CLEAR_BIT(TIMER2->CR1,UDIS);
		}

		/* Set UG Bit */
		SET_BIT(TIMER2->EGR,UG);

	}
	else if(Configuration->timer_id == TIMER5_SELECTION){
		TIMER5->SMCR = 0;
		TIMER5->CR1 = (Configuration->PreloadType    << ARPE)\
				|(Configuration->AlignedType         << CMS0)\
				|(Configuration->CountMode           << DIR );

		/* Adjust the interrupt and update event */
		if(Configuration->UEV_INT_Type == TIMER_UPDATE_EVENT_ENABLED_INTERRUPT_FLAG_DISABLED){
			/* Update event enabled & interrupt flag disabled */
			SET_BIT(TIMER5->CR1,URS);
			CLEAR_BIT(TIMER5->CR1,UDIS);
		}
		else if(Configuration->UEV_INT_Type == TIMER_UPDATE_EVENT_ENABLED_INTERRUPT_FLAG_ENABLED){
			/* Update event enabled & interrupt flag Enabled */
			CLEAR_BIT(TIMER5->CR1,URS);
			CLEAR_BIT(TIMER5->CR1,UDIS);
		}

		/* Set UG Bit */
		SET_BIT(TIMER5->EGR,UG);

	}
	else if(Configuration->timer_id == TIMER3_SELECTION){
		TIMER3->SMCR = 0;
		TIMER3->CR1 = (Configuration->PreloadType    << ARPE)\
				|(Configuration->AlignedType         << CMS0)\
				|(Configuration->CountMode           << DIR );

		/* Adjust the interrupt and update event */
		if(Configuration->UEV_INT_Type == TIMER_UPDATE_EVENT_ENABLED_INTERRUPT_FLAG_DISABLED){
			/* Update event enabled & interrupt flag disabled */
			SET_BIT(TIMER3->CR1,URS);
			CLEAR_BIT(TIMER3->CR1,UDIS);
		}
		else if(Configuration->UEV_INT_Type == TIMER_UPDATE_EVENT_ENABLED_INTERRUPT_FLAG_ENABLED){
			/* Update event enabled & interrupt flag Enabled */
			CLEAR_BIT(TIMER3->CR1,URS);
			CLEAR_BIT(TIMER3->CR1,UDIS);
		}

		/* Set UG Bit */
		SET_BIT(TIMER3->EGR,UG);


	}
	else if(Configuration->timer_id == TIMER4_SELECTION){
		TIMER4->SMCR = 0;
		TIMER4->CR1 = (Configuration->PreloadType    << ARPE)\
				|(Configuration->AlignedType         << CMS0)\
				|(Configuration->CountMode           << DIR );

		/* Adjust the interrupt and update event */
		if(Configuration->UEV_INT_Type == TIMER_UPDATE_EVENT_ENABLED_INTERRUPT_FLAG_DISABLED){
			/* Update event enabled & interrupt flag disabled */
			SET_BIT(TIMER4->CR1,URS);
			CLEAR_BIT(TIMER4->CR1,UDIS);
		}
		else if(Configuration->UEV_INT_Type == TIMER_UPDATE_EVENT_ENABLED_INTERRUPT_FLAG_ENABLED){
			/* Update event enabled & interrupt flag Enabled */
			CLEAR_BIT(TIMER4->CR1,URS);
			CLEAR_BIT(TIMER4->CR1,UDIS);
		}

		/* Set UG Bit */
		SET_BIT(TIMER4->EGR,UG);

	}


}


void TIMER_Start_OneShot(TIMER_IDType Timer_Number){
	/* Here, after one shot, it will stop the timer
	 * Clearing the CEN Bit in CR1 Register
	 *  */
	SET_BIT(TIMER2->CR1,OPM);
	switch(Timer_Number)
	{
	case TIMER2_SELECTION:
		SET_BIT(TIMER2->CR1,CEN);
		break;
	case TIMER3_SELECTION:
		SET_BIT(TIMER3->CR1,CEN);
		break;
	case TIMER4_SELECTION:
		SET_BIT(TIMER4->CR1,CEN);
		break;
	case TIMER5_SELECTION:
		SET_BIT(TIMER5->CR1,CEN);
		break;
	}

}


void TIMER_Start_Continuous(TIMER_IDType Timer_Number,TIMER_ChannelType ChannelID){
	/* Here, It will continuously output a PWM Signal */
	CLEAR_BIT(TIMER2->CR1,OPM);
	switch(Timer_Number)
	{
	case TIMER2_SELECTION:
		/* Enable Channels */
		switch(ChannelID){
		case TIMER_CHANNEL_1:
			SET_BIT(TIMER2->CCER , CC1E);
			break;
		case TIMER_CHANNEL_2:
			SET_BIT(TIMER2->CCER , CC2E);
			break;
		case TIMER_CHANNEL_3:
			SET_BIT(TIMER2->CCER , CC3E);
			break;
		case TIMER_CHANNEL_4:
			SET_BIT(TIMER2->CCER , CC4E);
			break;
		case TIMER_ALL_CHANNELS:
			SET_BIT(TIMER2->CCER , CC1E);
			SET_BIT(TIMER2->CCER , CC2E);
			SET_BIT(TIMER2->CCER , CC3E);
			SET_BIT(TIMER2->CCER , CC4E);
			break;
		}
		/* Enable Timer 2 */
		SET_BIT(TIMER2->CR1,CEN);

		break;
	case TIMER3_SELECTION:

		/* Enable Channels */
		switch(ChannelID){
		case TIMER_CHANNEL_1:
			SET_BIT(TIMER3->CCER , CC1E);
			break;
		case TIMER_CHANNEL_2:
			SET_BIT(TIMER3->CCER , CC2E);
			break;
		case TIMER_CHANNEL_3:
			SET_BIT(TIMER3->CCER , CC3E);
			break;
		case TIMER_CHANNEL_4:
			SET_BIT(TIMER3->CCER , CC4E);
			break;
		case TIMER_ALL_CHANNELS:
			SET_BIT(TIMER3->CCER , CC1E);
			SET_BIT(TIMER3->CCER , CC2E);
			SET_BIT(TIMER3->CCER , CC3E);
			SET_BIT(TIMER3->CCER , CC4E);
			break;
		}

		SET_BIT(TIMER3->CR1,CEN);
		break;
	case TIMER4_SELECTION:

		/* Enable Channels */
		switch(ChannelID){
		case TIMER_CHANNEL_1:
			SET_BIT(TIMER4->CCER , CC1E);
			break;
		case TIMER_CHANNEL_2:
			SET_BIT(TIMER4->CCER , CC2E);
			break;
		case TIMER_CHANNEL_3:
			SET_BIT(TIMER4->CCER , CC3E);
			break;
		case TIMER_CHANNEL_4:
			SET_BIT(TIMER4->CCER , CC4E);
			break;
		case TIMER_ALL_CHANNELS:
			SET_BIT(TIMER4->CCER , CC1E);
			SET_BIT(TIMER4->CCER , CC2E);
			SET_BIT(TIMER4->CCER , CC3E);
			SET_BIT(TIMER4->CCER , CC4E);
			break;
		}
		SET_BIT(TIMER4->CR1,CEN);
		break;
	case TIMER5_SELECTION:

		/* Enable Channels */
		switch(ChannelID){
		case TIMER_CHANNEL_1:
			SET_BIT(TIMER5->CCER , CC1E);
			break;
		case TIMER_CHANNEL_2:
			SET_BIT(TIMER5->CCER , CC2E);
			break;
		case TIMER_CHANNEL_3:
			SET_BIT(TIMER5->CCER , CC3E);
			break;
		case TIMER_CHANNEL_4:
			SET_BIT(TIMER5->CCER , CC4E);
			break;
		case TIMER_ALL_CHANNELS:
			SET_BIT(TIMER5->CCER , CC1E);
			SET_BIT(TIMER5->CCER , CC2E);
			SET_BIT(TIMER5->CCER , CC3E);
			SET_BIT(TIMER5->CCER , CC4E);
			break;
		}
		SET_BIT(TIMER5->CR1,CEN);
		break;
	}

}




void TIMER_EnableInterrupt(TIMER_IDType Timer_Number,TIMER_ChannelType ChannelID){
	switch(Timer_Number)
	{
	case TIMER2_SELECTION:
		switch(ChannelID){
		case TIMER_CHANNEL_1:
			SET_BIT(TIMER2->DIER,CC1IE);
			break;
		case TIMER_CHANNEL_2:
			SET_BIT(TIMER2->DIER,CC2IE);
			break;
		case TIMER_CHANNEL_3:
			SET_BIT(TIMER2->DIER,CC3IE);
			break;
		case TIMER_CHANNEL_4:
			SET_BIT(TIMER2->DIER,CC4IE);
			break;
		}
		break;

	case TIMER3_SELECTION:
		switch(ChannelID){
		case TIMER_CHANNEL_1:
			SET_BIT(TIMER3->DIER,CC1IE);
			break;
		case TIMER_CHANNEL_2:
			SET_BIT(TIMER3->DIER,CC2IE);
			break;
		case TIMER_CHANNEL_3:
			SET_BIT(TIMER3->DIER,CC3IE);
			break;
		case TIMER_CHANNEL_4:
			SET_BIT(TIMER3->DIER,CC4IE);
			break;
		}
		break;

	case TIMER4_SELECTION:
		switch(ChannelID){
		case TIMER_CHANNEL_1:
			SET_BIT(TIMER4->DIER,CC1IE);
			break;
		case TIMER_CHANNEL_2:
			SET_BIT(TIMER4->DIER,CC2IE);
			break;
		case TIMER_CHANNEL_3:
			SET_BIT(TIMER4->DIER,CC3IE);
			break;
		case TIMER_CHANNEL_4:
			SET_BIT(TIMER4->DIER,CC4IE);
			break;
		}
		break;

	case TIMER5_SELECTION:
		switch(ChannelID){
		case TIMER_CHANNEL_1:
			SET_BIT(TIMER5->DIER,CC1IE);
			break;
		case TIMER_CHANNEL_2:
			SET_BIT(TIMER5->DIER,CC2IE);
			break;
		case TIMER_CHANNEL_3:
			SET_BIT(TIMER5->DIER,CC3IE);
			break;
		case TIMER_CHANNEL_4:
			SET_BIT(TIMER5->DIER,CC4IE);
			break;
		}
		break;
	}
}

void TIMER_DisableInterrupt(TIMER_IDType Timer_Number,TIMER_ChannelType ChannelID){

}





void TIMER_Stop(TIMER_IDType Timer_Number,TIMER_ChannelType ChannelID){
	switch(Timer_Number)
	{
	case TIMER2_SELECTION:
		CLEAR_BIT(TIMER2->CR1,CEN);
		/* Disable Channels */
		switch(ChannelID){
		case TIMER_CHANNEL_1:
			CLEAR_BIT(TIMER2->CCER , CC1E);
			break;
		case TIMER_CHANNEL_2:
			CLEAR_BIT(TIMER2->CCER , CC2E);
			break;
		case TIMER_CHANNEL_3:
			CLEAR_BIT(TIMER2->CCER , CC3E);
			break;
		case TIMER_CHANNEL_4:
			CLEAR_BIT(TIMER2->CCER , CC4E);
			break;
		case TIMER_ALL_CHANNELS:
			CLEAR_BIT(TIMER2->CCER , CC1E);
			CLEAR_BIT(TIMER2->CCER , CC2E);
			CLEAR_BIT(TIMER2->CCER , CC3E);
			CLEAR_BIT(TIMER2->CCER , CC4E);
			break;
		}

		break;
	case TIMER3_SELECTION:
		CLEAR_BIT(TIMER3->CR1,CEN);
		/* Disable Channels */
		switch(ChannelID){
		case TIMER_CHANNEL_1:
			CLEAR_BIT(TIMER3->CCER , CC1E);
			break;
		case TIMER_CHANNEL_2:
			CLEAR_BIT(TIMER3->CCER , CC2E);
			break;
		case TIMER_CHANNEL_3:
			CLEAR_BIT(TIMER3->CCER , CC3E);
			break;
		case TIMER_CHANNEL_4:
			CLEAR_BIT(TIMER3->CCER , CC4E);
			break;
		case TIMER_ALL_CHANNELS:
			CLEAR_BIT(TIMER3->CCER , CC1E);
			CLEAR_BIT(TIMER3->CCER , CC2E);
			CLEAR_BIT(TIMER3->CCER , CC3E);
			CLEAR_BIT(TIMER3->CCER , CC4E);
			break;
		}
		break;
	case TIMER4_SELECTION:
		CLEAR_BIT(TIMER4->CR1,CEN);
		/* Disable Channels */
		switch(ChannelID){
		case TIMER_CHANNEL_1:
			CLEAR_BIT(TIMER4->CCER , CC1E);
			break;
		case TIMER_CHANNEL_2:
			CLEAR_BIT(TIMER4->CCER , CC2E);
			break;
		case TIMER_CHANNEL_3:
			CLEAR_BIT(TIMER4->CCER , CC3E);
			break;
		case TIMER_CHANNEL_4:
			CLEAR_BIT(TIMER4->CCER , CC4E);
			break;
		case TIMER_ALL_CHANNELS:
			CLEAR_BIT(TIMER4->CCER , CC1E);
			CLEAR_BIT(TIMER4->CCER , CC2E);
			CLEAR_BIT(TIMER4->CCER , CC3E);
			CLEAR_BIT(TIMER4->CCER , CC4E);
			break;
		}
		break;
	case TIMER5_SELECTION:
		CLEAR_BIT(TIMER5->CR1,CEN);
		/* Disable Channels */
		/* Disable Channels */
		switch(ChannelID){
		case TIMER_CHANNEL_1:
			CLEAR_BIT(TIMER5->CCER , CC1E);
			break;
		case TIMER_CHANNEL_2:
			CLEAR_BIT(TIMER5->CCER , CC2E);
			break;
		case TIMER_CHANNEL_3:
			CLEAR_BIT(TIMER5->CCER , CC3E);
			break;
		case TIMER_CHANNEL_4:
			CLEAR_BIT(TIMER5->CCER , CC4E);
			break;
		case TIMER_ALL_CHANNELS:
			CLEAR_BIT(TIMER5->CCER , CC1E);
			CLEAR_BIT(TIMER5->CCER , CC2E);
			CLEAR_BIT(TIMER5->CCER , CC3E);
			CLEAR_BIT(TIMER5->CCER , CC4E);
			break;
		}
		break;
	}
}


void TIMER_SetPrescaler(TIMER_IDType Timer_Number , TIMER_PrescalerType prescaler){
	switch(Timer_Number)
	{
	case TIMER2_SELECTION:
		TIMER2->PSC = prescaler;
		break;
	case TIMER3_SELECTION:
		TIMER3->PSC = prescaler;
		break;
	case TIMER4_SELECTION:
		TIMER4->PSC = prescaler;
		break;
	case TIMER5_SELECTION:
		TIMER5->PSC = prescaler;
		break;
	}

}



void TIMER_SetCompareValue(TIMER_IDType Timer_Number, TIMER_ChannelType ChannelID , TIMER_OutputCompareValue ComapreValue){
	switch(Timer_Number)
	{
	case TIMER2_SELECTION:
		switch(ChannelID){
		case TIMER_CHANNEL_1:
			TIMER2->CCR1 = ComapreValue;
			break;
		case TIMER_CHANNEL_2:
			TIMER2->CCR2 = ComapreValue;
			break;
		case TIMER_CHANNEL_3:
			TIMER2->CCR3 = ComapreValue;
			break;
		case TIMER_CHANNEL_4:
			TIMER2->CCR4 = ComapreValue;
			break;
		}
		break;

	case TIMER3_SELECTION:
		switch(ChannelID){
		case TIMER_CHANNEL_1:
			TIMER3->CCR1 = ComapreValue;
			break;
		case TIMER_CHANNEL_2:
			TIMER3->CCR2 = ComapreValue;
			break;
		case TIMER_CHANNEL_3:
			TIMER3->CCR3 = ComapreValue;
			break;
		case TIMER_CHANNEL_4:
			TIMER3->CCR4 = ComapreValue;
			break;
		}
		break;

	case TIMER4_SELECTION:
		switch(ChannelID){
		case TIMER_CHANNEL_1:
			TIMER4->CCR1 = ComapreValue;
			break;
		case TIMER_CHANNEL_2:
			TIMER4->CCR2 = ComapreValue;
			break;
		case TIMER_CHANNEL_3:
			TIMER4->CCR3 = ComapreValue;
			break;
		case TIMER_CHANNEL_4:
			TIMER4->CCR4 = ComapreValue;
			break;
		}
		break;

	case TIMER5_SELECTION:
		switch(ChannelID){
		case TIMER_CHANNEL_1:
			TIMER5->CCR1 = ComapreValue;
			break;
		case TIMER_CHANNEL_2:
			TIMER5->CCR2 = ComapreValue;
			break;
		case TIMER_CHANNEL_3:
			TIMER5->CCR3 = ComapreValue;
			break;
		case TIMER_CHANNEL_4:
			TIMER5->CCR4 = ComapreValue;
			break;
		}
		break;
	}
}


void TIMER_SetARR(TIMER_IDType Timer_Number , TIMER_AutoReloadType AutoReloadValue){
	switch(Timer_Number)
	{
	case TIMER2_SELECTION:
		TIMER2->ARR = AutoReloadValue;
		break;
	case TIMER3_SELECTION:
		TIMER3->ARR = AutoReloadValue;
		break;
	case TIMER4_SELECTION:
		TIMER4->ARR = AutoReloadValue;
		break;
	case TIMER5_SELECTION:
		TIMER5->ARR = AutoReloadValue;
		break;
	}

}


void TIMER_ClearTimerCount(TIMER_IDType Timer_Number){
	switch(Timer_Number)
	{
	case TIMER2_SELECTION:
		TIMER2->CNT = 0;
		break;
	case TIMER3_SELECTION:
		TIMER3->CNT = 0;
		break;
	case TIMER4_SELECTION:
		TIMER4->CNT = 0;
		break;
	case TIMER5_SELECTION:
		TIMER5->CNT = 0;
		break;
	}

}




void TIMER_SetDutyCycle(TIMER_IDType Timer_Number, TIMER_ChannelType ChannelID ,u8 DutyCycle){
	u32 TimerOnValue =0;
	switch(Timer_Number)
	{
	case TIMER2_SELECTION:
		TimerOnValue = (((TIMER2->ARR+1) * DutyCycle)/100)-1;
		break;
	case TIMER3_SELECTION:
		TimerOnValue = (((TIMER3->ARR+1) * DutyCycle)/100)-1;
		break;
	case TIMER4_SELECTION:
		TimerOnValue = (((TIMER4->ARR+1) * DutyCycle)/100)-1;
		break;
	case TIMER5_SELECTION:
		TimerOnValue = (((TIMER5->ARR+1) * DutyCycle)/100)-1;
		break;
	}
	TIMER_SetCompareValue(Timer_Number, ChannelID,  TimerOnValue);
}





