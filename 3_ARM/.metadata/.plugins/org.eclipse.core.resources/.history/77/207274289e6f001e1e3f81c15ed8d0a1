#include "../include/STD_Types.h"
#include "../include/GPT_Interface.h"
#include "../include/MGPIO_Interface.h"
#include "../include/MRCC_Interface.h"
#include "../include/MNVIC_Interface.h"
#include "../include/GPT_Private.h"


#include "../include/BIT_MATH.h"

int main(){
	MRCC_Init();

	MRCC_Enable_Peripheral(RCC_APB1,RCC_APB1_TIM2);
	MRCC_Enable_Peripheral(RCC_AHB1,RCC_AHB1_GPIOA);

	MGPIO_SetMode(PORTA,PIN0,ALTERNATE_FUNCTION_MODE);
	MGPIO_SetAlternativeFuncPin(PORTA,PIN0,AF1_TIM1_TIM2);

	MGPIO_SetMode(PORTA,PIN1,GENRAL_PURPOSE_OUTPUT_MODE);
	MGPIO_SetOutputPinMode(PORTA,PIN1,OUTPUT_PUSH_PULL,GPIO_PIN_LEVEL_LOW );
	MGPIO_SetPinValue(PORTA,PIN1,PIN_LEVEL_LOW);




	TIMER_Init(&Timer_configuration);

	TIMER_SetPrescaler(TIMER2_SELECTION, 15);

	TIMER_SetCompareValue(TIMER2_SELECTION, TIMER_CHANNEL_1, 500000);

	TIMER_SetARR(TIMER2_SELECTION, 500000);

	TIMER_ClearTimerCount(TIMER2_SELECTION);

//	MNVIC_VoidEnbleInterrupt(EXTINT_TIM2_POSITION);

//	TIMER_EnableInterrupt(TIMER2_SELECTION,TIMER_CHANNEL_1);

//	TIMER_Start_Continuous(TIMER2_SELECTION);

	TIMER_Start_OneShot(TIMER2_SELECTION);
	while(GET_BIT(TIMER2->SR,CC1IF)==0);
	CLEAR_BIT(TIMER2->SR,CC1IF);
	MGPIO_SetPinValue(PORTA,PIN1,PIN_LEVEL_HIGH);

	TIMER_SetCompareValue(TIMER2_SELECTION, TIMER_CHANNEL_1, 5000000);

	TIMER_SetARR(TIMER2_SELECTION, 5000000);

	TIMER_Start_OneShot(TIMER2_SELECTION);
	while(GET_BIT(TIMER2->SR,CC1IF)==0);
	CLEAR_BIT(TIMER2->SR,CC1IF);
	MGPIO_SetPinValue(PORTA,PIN1,PIN_LEVEL_LOW);



	while(1){
//		TIMER_SetCompareValue(TIMER2_SELECTION, TIMER_CHANNEL_1, 1000000);
//		TIMER_SetARR(TIMER2_SELECTION, 1000000);
//		TIMER_Start_OneShot(TIMER2_SELECTION);
//		while(GET_BIT(TIMER2->SR,CC1IF)==0);
//		CLEAR_BIT(TIMER2->SR,CC1IF);
//		MGPIO_SetPinValue(PORTA,PIN1,PIN_LEVEL_HIGH);
//		TIMER_Start_OneShot(TIMER2_SELECTION);
//		while(GET_BIT(TIMER2->SR,CC1IF)==0);
//		CLEAR_BIT(TIMER2->SR,CC1IF);
//		MGPIO_SetPinValue(PORTA,PIN1,PIN_LEVEL_LOW);
//
//
//
//		TIMER_SetCompareValue(TIMER2_SELECTION, TIMER_CHANNEL_1, 250000);
//		TIMER_SetARR(TIMER2_SELECTION, 250000);
//		TIMER_Start_OneShot(TIMER2_SELECTION);
//		while(GET_BIT(TIMER2->SR,CC1IF)==0);
//		CLEAR_BIT(TIMER2->SR,CC1IF);
//		MGPIO_SetPinValue(PORTA,PIN1,PIN_LEVEL_HIGH);
//		TIMER_Start_OneShot(TIMER2_SELECTION);
//		while(GET_BIT(TIMER2->SR,CC1IF)==0);
//		CLEAR_BIT(TIMER2->SR,CC1IF);
//		MGPIO_SetPinValue(PORTA,PIN1,PIN_LEVEL_LOW);
	}


}

