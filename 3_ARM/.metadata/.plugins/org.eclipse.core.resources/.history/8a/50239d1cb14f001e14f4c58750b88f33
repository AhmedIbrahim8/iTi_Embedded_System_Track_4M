/*******************************************************************************************/
/*  Module       :   GPIO                                                                   */
/*  File Name    :   MGPIO_Program.c                                                        */
/*  Description  :   Source File of the GPIO Driver                                         */
/*  Author       :   Ahmed Ibrahim                                                         */
/*  Date         :   10/09/2023                                                            */
/*******************************************************************************************/



/*******************************************************************************************/
/*********************************** Included  Files ***************************************/
/*******************************************************************************************/
/* Standard Types File */
#include "../include\STD_Types.h"
/* Bit Math File */
#include "../include\BIT_MATH.h"

/* RCC Specified Header Files */
#include "../include\MGPIO_Interface.h"
#include "../include\MGPIO_Config.h"
#include "../include\MGPIO_Private.h"

/********************************************************************************************/
/************************************** APIs Definition *************************************/
/********************************************************************************************/

void MGPIO_SetMode(u8 Copy_u8PortIndex,u8 Copy_u8PinIndex,u8 Copy_u8PinMode)
{
	if( (Copy_u8PortIndex==PORTA) && ( Copy_u8PinIndex == PIN13 || Copy_u8PinIndex == PIN14 || Copy_u8PinIndex == PIN15))
	{
		/* Do No thing */
	}
	else if((Copy_u8PortIndex==PORTB) && ( Copy_u8PinIndex == PIN3 || Copy_u8PinIndex == PIN4 ))
	{
		/* Do No thing */
	}
	else
	{
		switch(Copy_u8PortIndex)
		{
		case PORTA:
			GPIOA->MODER = (GPIOA->MODER &~(GPIO_MODE_MASK<<(Copy_u8PinIndex*2)) ) | (Copy_u8PinMode << (Copy_u8PinIndex*2));
			break;
		case PORTB:
			break;
		case PORTC:
			break;
		default:
		}
	}
}

void MGPIO_SetOutputPinMode(u8 Copy_u8PortIndex,u8 Copy_u8PinIndex,u8 Copy_u8OutputType,u8 Copy_u8Speed)
{

}

void MGPIO_SetInputPinMode(u8 Copy_u8PortIndex,u8 Copy_u8PinIndex,u8 Copy_u8InputType)
{

}

void MGPIO_GetPinValue(u8 Copy_u8PortIndex,u8 Copy_u8PinIndex,u8 *Copy_pu8Data)
{

}

void MGPIO_SetPinValue(u8 Copy_u8PortIndex,u8 Copy_u8PinIndex,u8 Copy_u8)
{

}
void MGPIO_SetResetValue(u8 Copy_u8PortIndex,u8 Copy_u8PinIndex,u8 Copy_u8SetOrReset)
{

}
